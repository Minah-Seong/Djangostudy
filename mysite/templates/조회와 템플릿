하나의 사이트에서 여러 앱을 사용할때 여러 앱의 화면을 구성하는 템플릿은
한 디렉터리에 모아 관리하는 편이 여러모로 좋으므로
파이보 시스템은 해당 디렉토리를 사용하지만
모든 앱이 공통으로 사용하는 템플릿 디렉터리는
mysite 아래에 있는 templates 폴더로 설정

모든 앱이 공통으로 사용할 템플릿 디렉터리 - ...\mysite\templates
파이보 앱만 사용할 템플릿 디렉터리 - ...\mysite\templates\pybo

-----------------------------------------------------------

\{% 와 %} : 템플릿태그

{% if question_list %}
question_list가 있다면 (question_list는 render 함수로 전달받은 "질문 목록" 데이터이다.)

{% for question in question_list %}
question_list를 반복하며 순차적으로 하나씩 question에 대입

{{ question.id }}
for문에 의해 대입된 question 객체의 id 번호를 출력

{{ question.subject }}
for문에 의해 대입된 question 객체의 제목을 출력

-----------------------------------------------------------

분기문 태그의 사용법은 다음과 같다.

{% if 조건문1 %}
    <p>조건문1에 해당되는 경우</p>
{% elif 조건문2 %}
    <p>조건문2에 해당되는 경우</p>
{% else %}
    <p>조건문1, 2에 모두 해당되지 않는 경우</p>
{% endif %}
파이썬의 if 문과 다를바가 없다. 다만 항상 {% endif %} 태그로 닫아주어야 한다는 점을 잊지 말자.

------------------------------------------------------------

반복문 태그의 사용법은 다음과 같다.

{% for item in list %}
    <p>순서: {{ forloop.counter }} </p>
    <p>{{ item }}</p>
{% endfor %}
이 역시 파이썬의 for 문과 다를게 없다. 역시 마지막은 항상 {% endfor %} 태그로 닫아주어야 한다.

템플릿 for문 안에서는 다음과 같은 forloop 객체를 사용할 수 있다.

forloop 속성	설명
forloop.counter	루프내의 순서로 1부터 표시
forloop.counter0	루프내의 순서로 0부터 표시
forloop.first	루프의 첫번째 순서인 경우 True
forloop.last	루프의 마지막 순서인 경우 True

--------------------------------------------------------------

객체를 출력하기 위한 태그의 사용법은 다음과 같다.

{{ 객체 }}
예) {{ item }}

객체에 속성이 있는 경우는 파이썬과 동일한 방법으로 도트(.) 문자를 이용하여 표시하면 된다.

{{ 객체.속성 }}
예) {{question.id}}, {{question.subject}}